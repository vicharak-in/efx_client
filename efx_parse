#!/bin/env python3
import xml.etree.ElementTree as ET
import os
import shutil
import argparse
import re
from zipfile import ZipFile

# take arguments from the command line
parser = argparse.ArgumentParser()
parser.add_argument("top_file_xml", help="top file xml")
args = parser.parse_args()

# if not given print usage
if not args.top_file_xml:
    print("Usage: ./parser <top_file_xml>")
    exit()

# get top file from args
top_file_xml = args.top_file_xml

# get the name of the directory
directory = os.path.dirname(os.path.realpath(top_file_xml))

# open file
f = open(top_file_xml, "r")
d = f.read()

# parse that file
myroot = ET.fromstring(d)

# server_files folder will be created if not there
if not os.path.exists("server_files"):
    os.mkdir("server_files")

# create list of files by parsing xml
lst = []

# get verilog files from the xml
for x in myroot[1]:
    c = x.attrib
    split_tup = os.path.splitext(c["name"])

    if split_tup[1]:
        lst.append(directory + "/" + c["name"])

# get memory configuration files
for x in lst:
    f = open(x, "r")
    source = f.read()
    objects = re.findall("\$readmem[h|v]\(\".*\"", source)

    for obj in objects:
        index = obj.find("\"")
        if index != -1:
            lst.append(directory + "/" + obj[index+1:-1])

# get sdc files from the xml
for x in myroot[2]:
    c = x.attrib
    split_tup = os.path.splitext(c["name"])

    if split_tup[1]:
        lst.append(directory + "/" + c["name"])

# get json file for the debugger
for x in myroot[9]:
    c = x.attrib
    split_tup = os.path.splitext(c["name"])

    if c["name"] == "auto_instantiation" and c["value"] == "on":
         lst.append(directory + "/debug_profile.wizard.json")

         if os.path.exists(directory + "/work_dbg/debug_top.v"):
             lst.append(directory + "/work_dbg/debug_top.v")

# after taking the files copy to created folder
for x in lst:
    if os.path.basename(x) == x[len(directory):len(x)]:
        shutil.copy2(x, 'server_files/')
    else:
        os.makedirs("server_files/" + os.path.dirname(x)[len(directory):], exist_ok=True)
        shutil.copy2(x, 'server_files/' + os.path.dirname(x)[len(directory):])

shutil.copy2(top_file_xml, 'server_files/')

# copy xml files
peri_xml_path = top_file_xml[:-3] + "peri.xml"
if os.path.exists(peri_xml_path):
    shutil.copy2(peri_xml_path, 'server_files/')

peri_xml_path = top_file_xml[:-3] + "peri.pre_import.xml"
if os.path.exists(peri_xml_path):
    shutil.copy2(peri_xml_path, 'server_files/')

# if any ip is included copy that as well
if os.path.exists(directory + "/ip"):
    shutil.copytree(directory + "/ip", "server_files/ip")

# create zip from the folder
zip_file_name = os.path.basename(top_file_xml[:-4])
archived = shutil.make_archive(zip_file_name, 'zip', 'server_files/')

print(zip_file_name + ".zip")

shutil.rmtree("server_files")
